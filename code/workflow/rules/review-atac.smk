'''
Comments 1:

    Except for the RNA-seq timecourse experiments (n=4), it appears that 
    both the ATAC-seq and the CRISPR screen experiments (primary and 
    validation) have been done as a single biological replicate. This 
    is especially problematic for the CRISPR screen, where most hits 
    were observed with either 1 or 2 gRNAs only (out of 10) â€“ Figure 2F. 
    Similarly, for the ATAC-seq data, there is no indication about the 
    biological reproducibility of the accessibility data such enrichment 
    at TSSs, fragment size or % in peaks. There are no representative regions 
    shown (such as for some of the TFs identified in Figure 1D) and no 
    indication about global changes induced during differentiation (for 
    example correlations or PCA, accessibility at constant or pluripotency 
    associated TF motifs as in Figure S1F). Furthermore, the authors 
    should deposit both the raw and the processed data in repository such 
    as GEO, dropbox link is not acceptable even at a review stage.

    Solution: 
    Compare sample to sample enrichments in: 
    1. TSS, Gene body, Genome wide; use deeptools to plot correlation
    2. fragment size of called peaks, or % of reads in peaks

'''

# import pandas as pd

configfile: 'config/review-config.yaml'

# variables storing files are from the original data in TFscreen
atac_ss_path = 'resources/TFscreen/atac/samplesheet2.csv' # symbolic link to file



# wildcard_constraints:
#     atacN = "[0-9]{1,2}"


#----------------------------------------------------------------------------------------
#                  ATAC QC   
#----------------------------------------------------------------------------------------

rule makePromoters:
    input: 'resources/annotations/hs38/gencode_v31_protein.bed'
    output: 
        promoters = 'resources/annotations/hs38/gencode_v31_protein_tss_u1k_d1k.bed'
    params:
        gs = '/gpfs/commons/groups/sanjana_lab/cdai/ref_genome/hs38/ucsc.hg38.chrom.sizes'
    shell:
        '''
        flankBed -i {input} -g {params.gs} -l 1 -r 0 -s | \
            slopBed -i stdin -g {params.gs} -l 999 -r 1000 -s | \
            sortBed > {output.promoters}
        '''


rule atacBigwig:
    input: 'resources/TFscreen/atac/bams_v3/ATAC{atacN}.PE.mapq.bam'
    output: 'results/reviews/bigwig/atac/ATAC{atacN}.bw'
    threads: 10
    resources: cpu = 10, mem_mb = 25000, time = 2000
    shell:
        '''
        bamCoverage --bam {input} --outFileName {output} --outFileFormat bigwig \
            --numberOfProcessors {threads} \
            --normalizeUsing RPKM \
            --effectiveGenomeSize 3049315783 \
            --ignoreForNormalization chrX \
            --numberOfProcessors {threads} \
            --minMappingQuality 20
        '''


def getMultiBigwigSummaryParamsCmd(wildcards):
    if wildcards.FeatureType.upper() == 'GENOME':
        cmd = "multiBigwigSummary bins"
    else:
        cmd = "multiBigwigSummary BED-file"
    return cmd

def getMultiBigwigSummaryParamsBed(wildcards):
    if wildcards.FeatureType.upper() == 'GENOME':
        bed = ""
    else:
        bed = '--BED ' + config['AnnoFeatures'][wildcards.FeatureType]
    return bed

def getMultiBigwigSummaryBinSize(wildcards):
    if wildcards.FeatureType.upper() == 'GENOME':
        bs = 10000
    else:
        bs = 100
    return bs


rule MultiBigwigSummaryATAC:
    message: '### Compute bam correlation plot for ATAC QC'
    input: expand("results/reviews/bigwig/atac/ATAC{N}.bw", N=[str(i) for i in range(1,13)])
    output: 
        npz = 'results/reviews/BigwigSummary/{FeatureType}/results.npz',
        heatmap = 'results/reviews/BigwigSummary/{FeatureType}/heatmap.pdf',
        matrix = 'results/reviews/BigwigSummary/{FeatureType}/corr.matrix'
    params: 
       cmd = getMultiBigwigSummaryParamsCmd,
       bed = getMultiBigwigSummaryParamsBed,
       binSize = getMultiBigwigSummaryBinSize
    threads: 10
    resources: cpu = 10, mem_mb = 25000, time = 2100
    shell: 
        '''
        {params.cmd} -b {input} -o {output.npz} {params.bed} -p {threads}  -bs {params.binSize}
        
        plotCorrelation -in {output.npz} -c spearman -p heatmap \
            -o {output.heatmap} --plotNumbers \
            --outFileCorMatrix {output.matrix} \
            -T "Spearman Correlation - {wildcards.FeatureType}" --skipZeros --colorMap viridis
        '''


# deeptools to plot heatmaps to show enrichment of ATAC-seq around TSS
rule atacTSSComputeMatrix:
    input: 
        bw = expand('results/reviews/bigwig/atac/ATAC{atacN}.bw', atacN=range(1,13)),
        tss = 'results/reviews/top5k_byRNA_proteincoding_tss_u1k_d1k.bed'
        # top 5k expressed genes' tss region is generated by notebook workflow/notebooks/top5k_byRNA_genes.ipynb
    output: 
        matrix = 'results/reviews/atac/deeptoolsplots/matrix_tss_u1k_d1k_top5k_genes.gz',
    threads: 20
    resources: cpu = 20, mem_mb = 35000, time = 2100
    shell:
        '''
        date
        computeMatrix reference-point \
            --referencePoint center \
            -b 2000 -a 2000 \
            -R {input.tss} -S {input.bw} \
            -o {output.matrix} \
            --skipZeros \
            --smartLabels \
            -p {threads} 
        date
        '''

rule atacTSSHeatmap:
    input: rules.atacTSSComputeMatrix.output.matrix
    output: 
        heatmap = 'results/reviews/atac/deeptoolsplots/heatmap_tss_u1k_d1k_top5k_genes.pdf'
    threads: 10
    resources: cpu = 10, mem_mb = 25000, time = 2100
    shell:
        '''
        date
        plotHeatmap -m {input} -o {output.heatmap}
        date
        '''


rule atacBamFlagstat:
    input: 'resources/TFscreen/atac/bams_v3/ATAC{atacN}.PE.mapq.bam'
    output: 'results/reviews/atac/bamFlagstat/ATAC{atacN}.flagstat.txt'
    threads: 10
    resources: cpu = 10, mem_mb = 25000, time = 2100
    shell:
        '''
        echo "samtools view -q 20 -f 3 -u -@ {threads} {input} | samtools flagstat -@ {threads} -" > {output}
        samtools view -q 20 -f 3 -u -@ {threads} {input} | samtools flagstat -@ {threads} - >> {output}
        '''


rule countReadsInPeaks:
    input:
        bam = 'resources/TFscreen/atac/bams_v3/ATAC{atacN}.PE.mapq.bam',
        peaks = 'resources/TFscreen/atac/macs2/v7/ATAC{atacN}_clean_peaks.narrowPeak'
    output: 'results/reviews/atac/counts/ATAC{atacN}.countsinpeaks.txt'
    threads: 10
    resources: cpu = 10, mem_mb = 25000, time = 2100
    shell:
        '''
        featureCounts -T {threads} \
            -F SAF \
            -a <(awk 'BEGIN {{OFS="\t"}}; NR>1 {{print $4,$1,$2,$3,$6}}' {input.peaks}) \
            -p --primary -Q 20 \
            -o {output} {input.bam}
        '''

rule computePRiP: # run this manually in rstudio
    '''output:
        - plots:
            - PRiP.pdf `results/reviews/atac/PRiP.pdf`
    '''
    input: 'workflow/scripts/ATACseqLibraryQC.qmd'
    output: 'results/reviews/atac/counts/PRiP.html'
    params: 
        files = '|'.join(expand('results/reviews/atac/counts/ATAC{N}.countsinpeaks.txt.summary', N=[str(i) for i in range(1,13)])),
        outdir = 'results/reviews/atac/counts',
    shell:
        '''
        # which quarto
        # which R
        # quarto render {input} --to html \
        #     --output $(basename {output}) \
        #     -P "files:{params.files}"
        # mv $(basename {output}) {output}
        '''


rule plotFragmentSizeDistribution:
    input: 'resources/TFscreen/atac/bams_v3/ATAC{atacN}.PE.mapq.bam'
    output: 'results/reviews/atac/fragSizeDist/ATAC{atacN}.pdf'
    params:
        label = 'ATAC{atacN}',
    script: '../scripts/ATACseqLibraryQC.R'




#----------------------------------------------------------------------------------------
#                  CRISPR Screen RIGER   
#----------------------------------------------------------------------------------------

rule RigerRRA:
    '''
    Run custom Riger RRA analysis on CRISPR screen data.
    Use this snakemake rule mainly as documentation. Preferably run the qmd in rstudio.
    '''
    input: '../analysis/crispr_rra.qmd'
    output: '../docs/analysis/crispr_rra.html'
    shell: 
        '''
        quarto render {input}
        ls -lah {output}
        '''



#----------------------------------------------------------------------------------------
#                  Re-generate interaction nodes
#----------------------------------------------------------------------------------------

def getRecomputeInteractionsInput(wildcards):

        samplesheet = "resources/TFscreen/atac/samplesheet2.csv", # has header
        peakfile = "resources/TFscreen/atac/diffbind/diffbind_consensu_min2overlap.bed", # no header
        rawcounts = "resources/TFscreen/atac/diffbind/diffbind_consensu_min2overlap_NO_RECENTER.txt", # has header
        hitlist = "resources/TFscreen/Hitlist_20191230.csv", # has header
        tflist = "resources/TFscreen/TFlist_20191230.csv", # has header
        jaspar2020 = "resources/TFscreen/atac/JASPAR2020_combined_matrices_20191030.txt"
        anno = {'genebody': 'resources/TFscreen/atac/Protein_coding_genes_Up_2k_20191230.bed', # gene body + TSS upstream 2kb
                'promoter': 'resources/TFscreen/atac/Protein_coding_gene_promoters_V2.bed', # 2kb up TSS + 500b down TSS
                'intergenic': 'resources/TFscreen/atac/Protein_coding_genes_Up_100k_20230111.bed' # 100kb up TSS + 1kb down TES
        }

        return {
            'samplesheet': samplesheet,
            'peakfile': peakfile,
            'rawcounts': rawcounts,
            'hitlist': hitlist,
            'tflist': tflist,
            'jaspar2020': jaspar2020,
            'generegion': anno[wildcards.FeatureType2]
        }

rule RecomputeInteractions:
    input: unpack(getRecomputeInteractionsInput)
    output: 'results/reviews/interactions/Interactions_AllTF_{FeatureType2}_{Normalize}_20230110.xlsx'
    wildcard_constraints:
        FeatureType2 = 'genebody|promoter|intergenic', # modify this if including other feature types
        Normalize = 'norm|raw'
    threads: 16
    resources: cpu = 16, mem_mb = 40000, time = 2100
    script: '../scripts/compute_interactions.R'


rule IntegrateInteractions:
    input:
        interaction_raw = 'results/reviews/interactions/Interactions_AllTF_{FeatureType2}_raw_20230110.xlsx',
        interaction_norm = 'results/reviews/interactions/Interactions_AllTF_{FeatureType2}_norm_20230110.xlsx',
        dge = 'resources/TFscreen/RNA-seq_timepoint_deseq_result_20200102.xlsx',
        hitlist = "resources/TFscreen/Hitlist_20191230.csv", # has header
        tflist = "resources/TFscreen/TFlist_20191230.csv" # has header
    output:
        csv = 'results/reviews/interactions/Interaction_matrix_nofilter_AllTF_{FeatureType2}_20230111.csv',
        readme = 'results/reviews/interactions/Interaction_matrix_nofilter_AllTF_{FeatureType2}_20230111_readme.txt' 
    wildcard_constraints:
        FeatureType2 = 'genebody|promoter|intergenic', # modify this if including other feature types
    params:
        interaction_sheets = ['Regulator_to_Target'],
        dge_timepoints_sheets = ["H15_vs_ES", "D1_vs_ES", "D4_vs_ES"],
        dge_rawcount_sheet = 'rawCounts'
    script: '../scripts/integrate_interactions.R'





#----------------------------------------------------------------------------------------
#                  Re-generate interaction nodes
#----------------------------------------------------------------------------------------

rule countReadsInPromoter:
    '''
    Only count promoter region reads in ATAC
    '''
    input:
        bam = 'resources/TFscreen/atac/bams_v3/ATAC{atacN}.PE.mapq.bam',
        promoter = 'resources/TFscreen/atac/Protein_coding_gene_promoters_V2.bed', # 2kb up TSS + 500b down TSS
    output: 'results/reviews/atac/counts/promoter/ATAC{atacN}.txt'
    threads: 10
    resources: cpu = 10, mem_mb = 25000, time = 2100
    shell:
        '''
        featureCounts -T {threads} \
            -F SAF \
            -a <(awk 'BEGIN {{OFS="\t"}}; {{print $4,$1,$2,$3,$6}}' {input.promoter}) \
            -p --primary -Q 20 -s 1 \
            -o {output} {input.bam}
        '''



















